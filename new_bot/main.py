
import os.path
import json
import re
import telebot
import random


bot = telebot.TeleBot('5929515446:AAH2IlbnOqHKOqWVleAqGmJ7HKps1XOETdw')

def validate_phone_number(phone_number):
    return bool(re.match(r"(\+?3?8?)?0?\d{9}$", phone_number))

if os.path.exists('phone_book.json'):
    with open('phone_book.json', 'r') as file:
        phone_book = json.load(file)
else:
    phone_book = { "Adam" : "+380768594758",
                   "Andreo" : "380768594758",
                   "Melisa" : "0768594758"}

@bot.message_handler(commands=['start',])
def hello(message):
    bot.send_message(message.chat.id, 'Hello! I am a Pawsome pics bot. I have a function to send cute pictures '
                                      'and a phone book. \nMy /commands')

@bot.message_handler(commands=['commands', '–∫–æ–º–∞–Ω–¥–∏'])
def commands(message):
    bot.send_message(message.chat.id, 'if you want a picture of a cute animal /morepaws'
                                      '\nCommands for working with the phonebook \n/stats, /add, /delete, /list, /show')


def get_random_cat_phrase():
    cat_phrases = [
        "–ì–æ—Ç—É–π—Å—è, –±–æ –ø—É—à–∏—Å—Ç–∏–∫–∏ –∞—Ç–∞–∫—É—é—Ç—å! üêæüò∫",
        "–ó –ø—É—Ö–Ω–∞—Å—Ç–∏–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä—ñ–π –∑–∞–≤–∂–¥–∏ –Ω–∞ –≤–∏—Å–æ—Ç—ñ! üò∏üêæ",
        "–ü—É—Ö–Ω–∞—Å—Ç—ñ—Å—Ç—å –∫–æ—Ç–∞ - —Ü–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —à–µ—Ä—Å—Ç—å, —Ü–µ –º–∏—Å—Ç–µ—Ü—Ç–≤–æ! üêàüé®",
        "–ö–æ—Ç–∏–∫–∏ - —Ü–µ –º–∞–ª–µ–Ω—å–∫—ñ –∑–∞–≤–æ–π–æ–≤–Ω–∏–∫–∏, –≥–æ—Ç–æ–≤—ñ –ø—ñ–¥–∫–æ—Ä–∏—Ç–∏ —Å–≤—ñ—Ç. üåéüê±",
        "–ü—É—à–∏—Å—Ç–∏–∫–∏ –≤—ñ–¥–∫—Ä–∏–≤–∞—é—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ —Å–≤—ñ—Ç—É —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ç–∏–≤—É! üåüüêæ",
        "–ö–æ—Ç–∏ - —Ü–µ –∂–∏–≤—ñ –≤–∏—Ç–≤–æ—Ä–∏ –º–∏—Å—Ç–µ—Ü—Ç–≤–∞ –∑ –±–µ–∑–º–µ–∂–Ω–∏–º –∑–∞–ø–∞—Å–æ–º –ø—É—Ö–Ω–∞—Å—Ç–æ—Å—Ç—ñ. üé®üêà",
        "–ü—É—à–∏—Å—Ç–∏–∫–∏ –∑–Ω–∞—é—Ç—å, —è–∫ –≤–∏–≤–µ—Å—Ç–∏ –ø–æ—Å–º—ñ—à–∫—É –Ω–∞ –±—É–¥—å-—è–∫–æ–º—É –æ–±–ª–∏—á—á—ñ! üò∫ü•∞",
        "–ß–∞—Ä—ñ–≤–Ω–∞ —Å–∏–ª–∞ –∫–æ—Ç—è—á–æ—ó –ø—É—Ö–Ω–∞—Å—Ç–æ—Å—Ç—ñ - —Ü–µ –Ω–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–∏–π —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä —â–∞—Å—Ç—è. üêæ‚ú®",
        "–õ–∞—Å–∫–∞ –∫–æ—Ç–∏–∫–∞ - —ñ —Ä–∞–¥—ñ—Å—Ç—å –≤—ñ–¥—Ä–∞–∑—É —Ä–æ—Å—Ç–µ —É–¥–≤—ñ—á—ñ, –∞ –º–æ–∂–µ –π –±—ñ–ª—å—à–µ! üòªüéâ",
        "–õ–∞—Å–∫–∞ –∫–æ—Ç–∏–∫–∞ - —Ü–µ —Ç–µ—Ä–º—ñ–Ω–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≥–∞–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ—ó–≤. üê±üöÄ",
        "–Ø–∫ —Ç—ñ–ª—å–∫–∏ –≤–∏ –≥–ª–∞–¥–∏—Ç–µ –∫–æ—Ç–∏–∫–∞, –æ–¥–∏–Ω –∫–æ—Ç–∏–∫ —É —Å–≤—ñ—Ç—ñ —â–∞—Å–ª–∏–≤–∏–π. üò∏‚ù§Ô∏è",
        "–ö–æ—Ç–∏–∫ –∫–æ—Ç–∏–∫—É –∫–æ—Ç–∏–∫. üê±üêæ"
    ]
    return random.choice(cat_phrases)


@bot.message_handler(commands=['morepaws'])
def send_cute_animal(message):
    image_files = os.listdir('images')
    if image_files:
        random_image_file = random.choice(image_files)
        image_path = os.path.join('images', random_image_file)
        with open(image_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    else:
        bot.send_message(message.chat.id, "No images found in the folder.")

    random_phrase = get_random_cat_phrase()
    bot.send_message(message.chat.id, random_phrase)


@bot.message_handler(commands=['stats'])
def stats(message):
    count = len(phone_book)
    bot.send_message(message.chat.id, f"I have {count} numbers in my phone book.")

@bot.message_handler(commands=['add'])
def add_contact(message):
    msg = bot.send_message(message.chat.id, "Enter the name for the new contact:")
    bot.register_next_step_handler(msg, process_name_step)

def process_name_step(message):
    name = message.text
    if name in phone_book:
        bot.send_message(message.chat.id, f"The contact '{name}' already exists.")
    else:
        msg = bot.send_message(message.chat.id, "Enter the phone number for the new contact:")
        bot.register_next_step_handler(msg, process_number_step, name)

def process_number_step(message, name):
    number = message.text
    if not validate_phone_number(number):
        bot.send_message(message.chat.id, "Invalid phone number format. Please try again.")
        return
    phone_book[name] = number
    with open('phone_book.json', 'w') as file:
        json.dump(phone_book, file)
    bot.send_message(message.chat.id, f"Contact '{name}' with phone number '{number}' has been added.")

@bot.message_handler(commands=['delete'])
def delete_contact(message):
    msg = bot.send_message(message.chat.id, "Enter the name of the contact you want to delete:")
    bot.register_next_step_handler(msg, process_delete_step)

def process_delete_step(message):
    name = message.text
    if name in phone_book:
        del phone_book[name]
        with open('phone_book.json', 'w') as file:
            json.dump(phone_book, file)
        bot.send_message(message.chat.id, f"Contact '{name}' has been deleted.")
    else:
        bot.send_message(message.chat.id, f"No contact named '{name}' found.")

@bot.message_handler(commands=['list'])
def list_contacts(message):
    contacts = "\n".join(phone_book.keys())
    bot.send_message(message.chat.id, f"Contacts:\n{contacts}")

@bot.message_handler(commands=['show'])
def show_contact(message):
    msg = bot.send_message(message.chat.id, "Enter the name of the contact you want to see:")
    bot.register_next_step_handler(msg, process_show_step)

def process_show_step(message):
    name = message.text
    if name in phone_book:
        number = phone_book[name]
        bot.send_message(message.chat.id, f"Contact '{name}': {number}")
    else:
        bot.send_message(message.chat.id, f"No contact named '{name}' found.")

bot.polling(none_stop=True)